/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-down-name: 'arrow-down';
$arrow-down-x: 34px;
$arrow-down-y: 42px;
$arrow-down-offset-x: -34px;
$arrow-down-offset-y: -42px;
$arrow-down-width: 24px;
$arrow-down-height: 11px;
$arrow-down-total-width: 75px;
$arrow-down-total-height: 67px;
$arrow-down-image: '../images/sprite.png';
$arrow-down: (34px, 42px, -34px, -42px, 24px, 11px, 75px, 67px, '../images/sprite.png', 'arrow-down', );
$close-name: 'close';
$close-x: 42px;
$close-y: 0px;
$close-offset-x: -42px;
$close-offset-y: 0px;
$close-width: 19px;
$close-height: 19px;
$close-total-width: 75px;
$close-total-height: 67px;
$close-image: '../images/sprite.png';
$close: (42px, 0px, -42px, 0px, 19px, 19px, 75px, 67px, '../images/sprite.png', 'close', );
$next-name: 'next';
$next-x: 61px;
$next-y: 0px;
$next-offset-x: -61px;
$next-offset-y: 0px;
$next-width: 14px;
$next-height: 25px;
$next-total-width: 75px;
$next-total-height: 67px;
$next-image: '../images/sprite.png';
$next: (61px, 0px, -61px, 0px, 14px, 25px, 75px, 67px, '../images/sprite.png', 'next', );
$prev-name: 'prev';
$prev-x: 0px;
$prev-y: 42px;
$prev-offset-x: 0px;
$prev-offset-y: -42px;
$prev-width: 14px;
$prev-height: 25px;
$prev-total-width: 75px;
$prev-total-height: 67px;
$prev-image: '../images/sprite.png';
$prev: (0px, 42px, 0px, -42px, 14px, 25px, 75px, 67px, '../images/sprite.png', 'prev', );
$quote-yellow-name: 'quote-yellow';
$quote-yellow-x: 14px;
$quote-yellow-y: 42px;
$quote-yellow-offset-x: -14px;
$quote-yellow-offset-y: -42px;
$quote-yellow-width: 20px;
$quote-yellow-height: 17px;
$quote-yellow-total-width: 75px;
$quote-yellow-total-height: 67px;
$quote-yellow-image: '../images/sprite.png';
$quote-yellow: (14px, 42px, -14px, -42px, 20px, 17px, 75px, 67px, '../images/sprite.png', 'quote-yellow', );
$right-arrow-name: 'right-arrow';
$right-arrow-x: 0px;
$right-arrow-y: 0px;
$right-arrow-offset-x: 0px;
$right-arrow-offset-y: 0px;
$right-arrow-width: 42px;
$right-arrow-height: 42px;
$right-arrow-total-width: 75px;
$right-arrow-total-height: 67px;
$right-arrow-image: '../images/sprite.png';
$right-arrow: (0px, 0px, 0px, 0px, 42px, 42px, 75px, 67px, '../images/sprite.png', 'right-arrow', );
$spritesheet-width: 75px;
$spritesheet-height: 67px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($arrow-down, $close, $next, $prev, $quote-yellow, $right-arrow, );
$spritesheet: (75px, 67px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
